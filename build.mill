//| mill-version: 1.0.0
//| mvnDeps:
//| - com.github.lolgab::mill-mima_mill1:0.2.0
//| - com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION
package build
import mill._, scalalib._, scalajslib._, scalanativelib._, publish._
import mill.util.VcsVersion
import mill.contrib.buildinfo.BuildInfo
import com.github.lolgab.mill.mima._

val communityBuildDottyVersion = sys.props.get("dottyVersion").toList

val scalaVersions = "2.12.19" :: "2.13.14" :: "3.3.3" :: communityBuildDottyVersion

val scalaReflectVersion = "1.1.3"

trait MimaCheck extends Mima {
  def mimaPreviousVersions = VcsVersion.vcsState().lastTag.toSeq
}

trait UtestModule extends PublishModule with MimaCheck {
  def artifactName = "utest"

  def publishVersion = VcsVersion.vcsState().format()

  def pomSettings = PomSettings(
    description = artifactName(),
    organization = "com.lihaoyi",
    url = "https://github.com/com-lihaoyi/utest",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github(owner = "com-lihaoyi", repo = "utest"),
    developers = Seq(
      Developer("lihaoyi", "Li Haoyi", "https://github.com/lihaoyi")
    )
  )
}
trait UtestMainModule extends CrossScalaModule with UtestModule with PlatformScalaModule{
  def resolveUnpackShade(filtered: Seq[PathRef])(implicit ctx: mill.api.TaskCtx) = {
    for(jar <- filtered) os.unzip(jar.path, Task.dest)

    for(file <- os.walk(Task.dest) if file.ext == "scala"){
      val text = os.read(file)
      if (!text.contains("package scala")){
        os.write.over(file, "package utest\n" + text.replace("assert(", "Predef.assert("))
      }
    }
    // Remove these parts we're not using that are difficult to compile
    os.remove(Task.dest / "TPrintImpl.scala")
    os.remove(Task.dest / "pprint/TPrint.scala")
    os.remove(Task.dest / "pprint/package.scala")

    Seq(PathRef(Task.dest))
  }

  def generatedSources = Task{
    resolveUnpackShade(
      defaultResolver().classpath(
        Seq(mvn"com.lihaoyi::pprint:0.9.1", mvn"com.lihaoyi::fansi:0.5.1"),
        sources = true
      ).filter(_.path.last match{
        case s"fansi$versionSuffix.jar" => true
        case s"pprint$versionSuffix.jar" => true
        case _ => false
      })
    )
  }
}


trait UtestTestModule extends BuildInfo with TestModule {
  def scalaVersion: T[String]
  def testFramework = "test.utest.CustomFramework"

  val buildInfoPackageName = "test.utest"

  def buildInfoMembers = Seq(BuildInfo.Value("scalaVersion", scalaVersion()))
}

object utest extends Module {
  object jvm extends Cross[JvmUtestModule](scalaVersions)
  trait JvmUtestModule
    extends UtestMainModule {
    def mvnDeps = Seq(
      mvn"com.lihaoyi::sourcecode::0.4.3-M5",
      mvn"org.scala-sbt:test-interface::1.0"
    ) ++ (if (crossScalaVersion.startsWith("2")) Seq(
      mvn"org.portable-scala::portable-scala-reflect::$scalaReflectVersion",
      mvn"org.scala-lang:scala-reflect:$crossScalaVersion"
    ) else Seq())
    object test extends ScalaTests with UtestTestModule{
      def resources = super[UtestTestModule].resources() ++ super[ScalaTests].resources()
    }
  }

  object js extends Cross[JsUtestModule](scalaVersions)
  trait JsUtestModule extends UtestMainModule with ScalaJSModule{
    def mvnDeps = Seq(
      mvn"com.lihaoyi::sourcecode::0.4.3-M5",
      mvn"org.scala-js::scalajs-test-interface:${scalaJSVersion()}".withDottyCompat(crossScalaVersion),
      mvn"org.portable-scala::portable-scala-reflect::$scalaReflectVersion".withDottyCompat(crossScalaVersion)
    ) ++ (if(crossScalaVersion.startsWith("2")) Seq(
      mvn"org.scala-lang:scala-reflect:$crossScalaVersion"
    ) else Seq())
    def scalaJSVersion = "1.19.0"
    object test extends ScalaJSTests with UtestTestModule{
      def resources = super[UtestTestModule].resources() ++ super[ScalaJSTests].resources()
    }
  }

  object native extends Cross[NativeUtestModule](scalaVersions)
  trait NativeUtestModule extends UtestMainModule with ScalaNativeModule {
    def mvnDeps = Seq(
      mvn"com.lihaoyi::sourcecode::0.4.3-M5",
      mvn"org.scala-native::test-interface::${scalaNativeVersion()}"
    )

    def scalaNativeVersion = "0.5.8"
    object test extends ScalaNativeTests with UtestTestModule{
      def resources = super[UtestTestModule].resources() ++ super[ScalaNativeTests].resources()
    }
  }
}
